# -*- coding: utf-8 -*-
"""generate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pG7Pf17eE26hpEdq97dzvZPH7WiNKtk8
"""

from PIL import Image 
from IPython.display import display 
import random
import json

# Each image is made up a series of traits
# The weightings for each trait drive the rarity and add up to 100%

background = ["Blue", "Cyan", "Green", "Grey", "Orange", "Pink", "Purple", "Red", "Tan", "Yellow"] 
background_weights = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

base = ["Blue", "Cyan", "Green", "Grey", "Orange", "Pink", "Purple", "Red", "Brown", "Yellow"] 
base_weights = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

eyes = ["Black", "Blue", "Brown", "Cyan", "Green", "Grey", "Orange", "Red", "White", "Yellow"] 
eyes_weights = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

mouth = ["Black", "Blue", "Brown", "Cyan", "Green", "Orange", "Pink", "Red", "White", "Yellow"] 
mouth_weights = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

accessory = ["Cigarette", "Pipe", "Vape", "None", "None", "None", "None", "None", "None", "None"] 
accessory_weights = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

hats = ["Beanie", "Bow", "Cap", "Cowboy", "Festive", "Fez", "Headband", "None", "Pirate", "Wizard"] 
hats_weights = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]

# Dictionary variable for each trait. 
# Eech trait corresponds to its file name

background_files = {
    "Blue": "blue",
    "Cyan": "cyan",
    "Green": "green",
    "Grey": "grey",
    "Orange": "orange",
    "Pink": "pink",
    "Purple": "purple",
    "Red": "red",
    "Tan": "tan",
    "Yellow": "yellow",
}

base_files = {
    "Blue": "blue",
    "Cyan": "cyan",
    "Green": "green",
    "Grey": "grey",
    "Orange": "orange",
    "Pink": "pink",
    "Purple": "purple",
    "Red": "red",
    "Brown": "Brown",
    "Yellow": "yellow",
}

accessory_files = {
    "Cigarette": "cigarette",
    "Pipe": "pipe",
    "Vape": "vape",
    "None": "none",
    "None": "none",
    "None": "none",
    "None": "none",
    "None": "none",
    "None": "none",
    "None": "none",
}

hats_files = {
    "Beanie": "beanie",
    "Bow": "bow",
    "Cap": "cap",
    "Cowboy": "cowboy",
    "Festive": "festive",
    "Fez": "fez",
    "Headband": "headband",
    "None": "none",
    "Pirate": "pirate",
    "Wizard": "wizard",
}

eyes_files = {
    "Black": "black",
    "Blue": "blue",
    "Brown": "brown",
    "Cyan": "cyan",
    "Green": "green",
    "Grey": "grey",
    "Orange": "orange",
    "Red": "red",
    "White": "white",
    "Yellow": "yellow",
}

mouth_files = {
    "Black": "black",
    "Blue": "blue",
    "Brown": "brown",
    "Cyan": "cyan",
    "Green": "green",
    "Orange": "orange",
    "Pink": "pink",
    "Red": "red",
    "White": "white",
    "Yellow": "yellow",
}

## Generate Traits

TOTAL_IMAGES = 1000# Number of random unique images we want to generate

all_images = [] 

# A recursive function to generate unique image combinations
def create_new_image():
    
    new_image = {} #

    # For each trait category, select a random trait based on the weightings 
    new_image ["Background"] = random.choices(background, background_weights)[0]
    new_image ["Base"] = random.choices(base, base_weights)[0]
    new_image ["Mouth"] = random.choices(mouth, mouth_weights)[0]
    new_image ["Accessory"] = random.choices(accessory, accessory_weights)[0]
    new_image ["Eyes"] = random.choices(eyes, eyes_weights)[0]
    new_image ["Hat"] = random.choices(hats, hats_weights)[0]
    
    if new_image in all_images:
        return create_new_image()
    else:
        return new_image
    
# Generate the unique combinations based on trait weightings
for i in range(TOTAL_IMAGES): 
    
    new_trait_image = create_new_image()
    
    all_images.append(new_trait_image)

# Returns true if all images are unique
def all_images_unique(all_images):
    seen = list()
    return not any(i in seen or seen.append(i) for i in all_images)

print("Are all images unique?", all_images_unique(all_images))

# Add token Id to each image
i = 0
for item in all_images:
    item["tokenId"] = i
    i = i + 1

# print(all_images)

# Get Trait Counts

background_count = {}
for item in background:
    background_count[item] = 0
    
base_count = {}
for item in base:
    base_count[item] = 0

mouth_count = {}
for item in mouth:
    mouth_count[item] = 0

accessory_count = {}
for item in accessory:
    accessory_count[item] = 0

eyes_count = {}
for item in eyes:
    eyes_count[item] = 0

hats_count = {}
for item in hats:
    hats_count[item] = 0

for image in all_images:
    background_count[image["Background"]] += 1
    base_count[image["Base"]] += 1
    eyes_count[image["Eyes"]] += 1
    mouth_count[image["Mouth"]] += 1
    accessory_count[image["Accessory"]] += 1
    hats_count[image["Hat"]] += 1
    
print(background_count)
print(base_count)
print(mouth_count)
print(accessory_count)
print(eyes_count)
print(hats_count)

#### Generate Metadata for all Traits 
METADATA_FILE_NAME = './metadata/all-traits.json'; 
with open(METADATA_FILE_NAME, 'w') as outfile:
    json.dump(all_images, outfile, indent=4)

generateImageCount = [{"Background": "Blue","Background":"Blue","Background":"Cyan","Background":"Green","Background":"Grey","Background":"Orange","Background":"Pink","Background":"Purple","Background":"Red","Background":"Tan","Background":"Yellow",
"Base": "Blue","Base":"Blue","Base":"Brown","Base":"Cyan","Base":"Green","Base":"Grey","Base":"Orange","Base":"Pink","Base":"Purple","Base":"Red","Base":"Yellow",
"Eyes":"Blue","Eyes":"Brown","Eyes":"Cyan","Eyes":"Green","Eyes":"Grey","Eyes":"Orange","Eyes":"Pink","Eyes":"Purple","Eyes":"Red","Eyes":"Yellow"}]

#### Generate Images    
for item in all_images:
    
    # for items in range(len(generateImageCount)):
    
    im1 = Image.open(f'./source/bg/{background_files[item["Background"]]}.png').convert('RGBA')
    im2 = Image.open(f'./source/fins/{base_files[item["Base"]]}.png').convert('RGBA')
    im3 = Image.open(f'./source/eyes/{eyes_files[item["Eyes"]]}.png').convert('RGBA')
    im4 = Image.open(f'./source/mouth/{mouth_files[item["Mouth"]]}.png').convert('RGBA')
    im5 = Image.open(f'./source/hats/{hats_files[item["Hat"]]}.png').convert('RGBA')
    im6 = Image.open(f'./source/accessory/{accessory_files[item["Accessory"]]}.png').convert('RGBA')

    #Create each composite
    com1 = Image.alpha_composite(im1, im2)
    com2 = Image.alpha_composite(com1, im3)
    com3 = Image.alpha_composite(com2, im4)
    com4 = Image.alpha_composite(com3, im5)
    com5 = Image.alpha_composite(com4, im6)

    #Convert to RGB
    rgb_im = com5.convert('RGBA')
    file_name = str(item["tokenId"]) + ".png"
    rgb_im.save("./images/" + file_name)

import pdb; pdb.set_trace()
#### Generate Metadata for each Image    

f = open('./metadata/all-traits.json',) 
data = json.load(f)

IMAGES_BASE_URI = "ipfs://Qme4W23MB7mL9S7pxP4t2gS9H5LVPtPjxLCKBnGkTjBSEw"
PROJECT_NAME = "Curious Axolotl"

tokens=[]

def getAttribute(key, value):
    return {
        "trait_type": key,
        "value": value
    }
for i in data:
    token_id = i['tokenId']
    token = {
        "image": IMAGES_BASE_URI + str(token_id) + '.png',
        "description": "[Created by f00d4tehg0dz](https://opensea.io/f00d4tehg0dz)",
        "external": "https://curiousaxolotlnft.com",
        "tokenId": token_id,
        "name": PROJECT_NAME + ' ' + str(token_id),
        "attributes": []
    }
    token["attributes"].append(getAttribute("Background", i["Background"]))
    token["attributes"].append(getAttribute("Base", i["Base"]))
    token["attributes"].append(getAttribute("Eyes", i["Eyes"]))
    token["attributes"].append(getAttribute("Mouth", i["Mouth"]))
    token["attributes"].append(getAttribute("Accessory", i["Accessory"]))
    token["attributes"].append(getAttribute("Hat", i["Hat"]))

    tokens.append(token)
    with open('./metadata/' + str(token_id), 'w') as outfile:
        json.dump(token, outfile, indent=4)
     
    with open('./metadata.json', 'w') as outfile:
        json.dump(tokens, outfile, indent=4)

f.close()


